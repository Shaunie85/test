#include <Arduino.h>
#include <EEPROM.h>
#include <TFT_eSPI.h>
#include <HX711.h>
#include "util.h"
#include "BLDCMotor.h"
#include "drivers/BLDCDriver6PWM.h"
#include "mt6701_sensor.h"
// #include "configuration.h"
#include <pb.h>

#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>

// SSID & Passwort fÃ¼r das lokale WiFi
#define WIFI_SSID "FRITZ!Box6591CableMH"
#define WIFI_PASSWORD "76111069267883455750"
#define FOC_PID_P 4
#define FOC_PID_I 0
#define FOC_PID_D 0.04
#define FOC_PID_OUTPUT_RAMP 10000
#define FOC_PID_LIMIT 10
#define FOC_VOLTAGE_LIMIT 5

#define X_CENTER_CIRCLE 120
#define Y_CENTER_CIRCLE 160
#define RADIUS_CIRCLE 100

#define DETENT_LEFT (25 / 18) * PI
#define DETENT_RIGHT (29 / 18) * PI
#define DETENT_MIDDLE (3 / 2) * PI

// Function Prototypes
void connectToWiFi();
void MotorRun(bool pressstatus);
void CalibrationKlick();
void CalibrateSensorZero();
void HapticClick();
void DrawPointer(float angle);
float LoopSensorValue(float meas_val);
void MotorCalibrate();

// Definitions
TFT_eSPI tft_ = TFT_eSPI();
TFT_eSprite spr_ = TFT_eSprite(&tft_);
HX711 klick;
BLDCMotor motor = BLDCMotor(1);
BLDCDriver6PWM driver = BLDCDriver6PWM(PIN_UH, PIN_UL, PIN_VH, PIN_VL, PIN_WH, PIN_WL);
MT6701Sensor encoder = MT6701Sensor();
// Configuration& configuration_;

// Variables
static const uint8_t LEDC_CHANNEL_LCD_BACKLIGHT = 0;
bool run = 1;
int idle_klick = 0;
int delta_klick = 0;
float click = 0;
char buf_[72];
static bool pressed = pdFALSE;
uint8_t press_count_ = 1;
// Variables - Calibrate Sensor to 0
float old_val = 0;
float new_val = 0;
float dif_val = 0;
float cal_val = 0;
// Variables - EEProm
int eepromAddress = 0;    // Define the EEPROM address where the variable will be stored
int CalibrationClick = 0; // Define the variable to be set and saved
// Variables - Kreis
float x_circle = 0;
float y_circle = 0;
// Variables - test2
float idle_check_velocity_ewma = 0;
uint32_t last_idle_start = 0;
uint32_t last_publish = 0;
static const float DEAD_ZONE_DETENT_PERCENT = 0.2;
static const float DEAD_ZONE_RAD = 1 * _PI / 180;
static const float IDLE_VELOCITY_EWMA_ALPHA = 0.001;
static const float IDLE_VELOCITY_RAD_PER_SEC = 0.05;
static const uint32_t IDLE_CORRECTION_DELAY_MILLIS = 500;
static const float IDLE_CORRECTION_MAX_ANGLE_RAD = 5 * PI / 180;
static const float IDLE_CORRECTION_RATE_ALPHA = 0.0005;

typedef struct _PB_SmartKnobConfig
{
    int32_t position;
    float sub_position_unit;
    uint8_t position_nonce;
    int32_t min_position;
    int32_t max_position;
    float position_width_radians;
    float detent_strength_unit;
    float endstop_strength_unit;
    float snap_point;
    char text[51];
    pb_size_t detent_positions_count;
    int32_t detent_positions[5];
    float snap_point_bias;
    int16_t led_hue;
} PB_SmartKnobConfig;

float current_detent_center;
float prevValue = 0.0;
float sensorValue = 0.0;

PB_SmartKnobConfig config = {
    .position = 0,
    .sub_position_unit = 0,
    .position_nonce = 0,
    .min_position = 0,
    .max_position = 1,
    .position_width_radians = 60 * _PI / 180,
    .detent_strength_unit = 0,
};
int32_t current_position = 0;
float latest_sub_position_unit = 0;

static PB_SmartKnobConfig configs[] = {
    {
        0,
        0,
        3,
        0,
        1,
        60 * PI / 180,
        1,
        1,
        0.55, // Note the snap point is slightly past the midpoint (0.5); compare to normal detents which use a snap point *past* the next value (i.e. > 1)
        "On/off\nStrong detent",
        0,
        {},
        0,
        157,
    },
};
int i = 0;
int zz = 1;
void setup()
{
    Serial.begin(921600);
    EEPROM.begin(512);
    delta_klick = EEPROM.readInt(eepromAddress);
    eepromAddress += sizeof(delta_klick);
    idle_klick = EEPROM.readInt(eepromAddress);
    eepromAddress = 0;
    EEPROM.end();
    // connectToWiFi();
    Serial.println("Connected");
    tft_.begin();
    tft_.invertDisplay(1);
    tft_.setRotation(SK_DISPLAY_ROTATION);
    tft_.fillScreen(TFT_LIGHTGREY);
    klick.begin(38, 2);

    driver.voltage_power_supply = 5;
    driver.init();
    encoder.init();

    motor.linkDriver(&driver);
    motor.controller = MotionControlType::torque;
    motor.voltage_limit = FOC_VOLTAGE_LIMIT;
    motor.velocity_limit = 10000;
    motor.linkSensor(&encoder);
    motor.PID_velocity.P = FOC_PID_P;
    motor.PID_velocity.I = FOC_PID_I;
    motor.PID_velocity.D = FOC_PID_D;
    motor.PID_velocity.output_ramp = FOC_PID_OUTPUT_RAMP;
    motor.PID_velocity.limit = FOC_PID_LIMIT;
    motor.init();
    encoder.update();
    // motor.controller = MotionControlType::angle_openloop;
    motor.pole_pairs = 7;
    // motor.initFOC(5.515216, Direction::CW);
    // motor.monitor_downsample = 0;
    current_detent_center = motor.shaft_angle;

    ledcSetup(LEDC_CHANNEL_LCD_BACKLIGHT, 5000, 16);
    ledcAttachPin(PIN_LCD_BACKLIGHT, LEDC_CHANNEL_LCD_BACKLIGHT);
    ledcWrite(LEDC_CHANNEL_LCD_BACKLIGHT, UINT16_MAX);
    spr_.setColorDepth(8);
    if (spr_.createSprite(TFT_WIDTH, TFT_HEIGHT) == nullptr)
    {
        Serial.println("ERROR: sprite allocation failed!");
        tft_.fillScreen(TFT_RED);
    }
    else
    {
        Serial.println("Sprite created!");
        tft_.fillScreen(TFT_PURPLE);
    }
    // spr_.setTextColor(0xFFFF, TFT_BLACK);

    // const int RADIUS = TFT_WIDTH / 2;
    //  const uint16_t FILL_COLOR = spr_.color565(90, 18, 151);
    //  const uint16_t DOT_COLOR = spr_.color565(80, 100, 200);
    // spr_.fillCircle(TFT_WIDTH / 2, TFT_HEIGHT / 2, RADIUS / 2, TFT_RED);
    // spr_.drawLine(TFT_WIDTH / 2, TFT_HEIGHT / 2, TFT_WIDTH / 2, 0, TFT_RED);
    Serial.println("drawCircle");
    spr_.pushSprite(0, 0);
    ledcWrite(LEDC_CHANNEL_LCD_BACKLIGHT, UINT16_MAX);
    // MotorCalibrate();
    CalibrateSensorZero();
    // current_detent_center = motor.shaftAngle();
    motor.initFOC(5.50, Direction::CW);
    Serial.println("RUN BITCH;");
}

void loop()
{
    motor.loopFOC();
    // float new_angle = LoopSensorValue(motor.shaftAngle());
    // DrawPointer(new_angle);
    //    float angle_to_detent_center = motor.shaftAngle() - current_detent_center;
    float angle_to_detent_center = encoder.getSensorAngle() - current_detent_center;
    motor.PID_velocity.limit = 10;
    float dead_zone_adjustment = CLAMP(
        angle_to_detent_center,
        fmaxf(-config.position_width_radians * DEAD_ZONE_DETENT_PERCENT, -DEAD_ZONE_RAD),
        fminf(config.position_width_radians * DEAD_ZONE_DETENT_PERCENT, DEAD_ZONE_RAD));
    if (fabsf(motor.shaft_velocity) > 60)
    {
        // Don't apply torque if velocity is too high (helps avoid positive feedback loop/runaway)
        motor.move(0);
    }
    else
    {
        // float input = -angle_to_detent_center + dead_zone_adjustment;

        float input = -angle_to_detent_center;
        float torque = motor.PID_velocity(input);
        motor.move(0);
/*        Serial.print(input);
        Serial.print(" ");
        Serial.print(encoder.getSensorAngle());
        Serial.print(" ");
        Serial.print(encoder.getSensorAngle() == 0.00 && encoder.getSensorAngle() < 6.30 && zz == 10);
        Serial.print(" ");
        Serial.println(current_detent_center);
*/    }
float sensorValue = encoder.getSensorAngle(); // Read the sensor angle

// Detect direction of rotation
int direction = 0; // 0: No movement, 1: Clockwise, -1: Counterclockwise

if (sensorValue > prevValue)
{
    if (sensorValue - prevValue < 0.5)
    {
        direction = 1; // Clockwise
    }
}
else if (sensorValue < prevValue)
{
    if (prevValue - sensorValue < 0.5)
    {
        direction = -1; // Counterclockwise
    }
}
Serial.print(" ");
Serial.println(sensorValue - prevValue);
// Update previous angle
prevValue = sensorValue;

// Print direction to serial monitor
if (direction != 0)
{
    if (direction == 1)
    {
        Serial.print("rechts");
    }
    else if (direction == -1)
    {
        Serial.print("links ");
    }
}
delay(100);
/*
  if (Serial.available() > 0)
  {
    Serial.println("available");
    if (Serial.read() == 'C')
    {
      Serial.println("calibrate");
      CalibrationKlick();
    }
  }
  if (klick.wait_ready_timeout(100))
  {
    HapticClick();
  }*/
/*
 if (Serial.available() > 0)
 {
   if (Serial.read() == 'C')
   {
     Serial.println("Don't touch and klick 'c' ");
     while (Serial.available() <= 0)
     {
     }
     if (Serial.read() == 'c')
     {
       idle_klick = klick.read();
     }
     Serial.println("press with medium force and klick 'c' ");
     while (Serial.available() <= 0)
     {
     }
     if (Serial.read() == 'c')
     {
       delta_klick = klick.read() - idle_klick;
     }
     Serial.print("idle_klick: ");
     Serial.print(idle_klick);
     Serial.print("   delta_klick: ");
     Serial.println(delta_klick);
   }
   run = 1;
 }

 if (run == 1)
 {
   if (klick.wait_ready_timeout(100))
   {
     //Serial.println(lerp(klick.read(), idle_klick, idle_klick + delta_klick, 0, 1));
     click = lerp(klick.read(), idle_klick, idle_klick + delta_klick, 0, 1);
     //Serial.println(click);
     // Ignore readings that are way out of expected bounds
     if (-1 < click && click < 2)
     {
       static uint8_t press_readings;
       Serial.print(!pressed);
       Serial.print("  ");
       Serial.println(click);
       if (!pressed && click > 1)
       {
         Serial.println(press_readings);
         press_readings++;
         Serial.println(press_readings);
         if (press_readings > 2)
         {
           Serial.println("2");
           MotorRun(true);
           pressed = true;
           press_count_++;
         }
       }
       else if (pressed && click < 0.5)
       {
         Serial.println("3");
         press_readings++;
         if (press_readings > 2)
         {
           Serial.println("4");
           MotorRun(false);
           pressed = false;
         }
       }
       else
       {
         press_readings = 0;
       }
     }
   }
 }*/
}

void connectToWiFi()
{
    int TryCount = 0;
    // log_i( "connect to wifi" );
    while (WiFi.status() != WL_CONNECTED)
    {
        TryCount++;
        WiFi.disconnect();
        WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
        WiFi.hostname("smartViewKnob");
        vTaskDelay(4000);
        if (TryCount == 10)
        {
            ESP.restart();
        }
    }
    //  WiFi.onEvent( WiFiEvent );
} // void connectToWiFi()

void HapticClick()
{
    click = lerp(klick.read(), idle_klick, idle_klick + delta_klick, 0, 1);
    //  Ignore readings that are way out of expected bounds
    if (-1 < click && click < 2)
    {
        static uint8_t press_readings;
        if (!pressed && click > 1)
        {
            Serial.println(press_readings);
            press_readings++;
            Serial.println(press_readings);
            if (press_readings > 2)
            {
                MotorRun(true);
                pressed = true;
                press_count_++;
            }
        }
        else if (pressed && click < 0.5)
        {
            press_readings++;
            if (press_readings > 2)
            {
                MotorRun(false);
                pressed = false;
            }
        }
        else
        {
            press_readings = 0;
        }
    }
}

void MotorRun(bool pressstatus)
{
    float strength = pressstatus ? 5 : 1.5;
    motor.move(strength);
    for (uint8_t i = 0; i < 3; i++)
    {
        Serial.println("Click");
        motor.loopFOC();
        delay(1);
    }
    motor.move(-strength);
    for (uint8_t i = 0; i < 3; i++)
    {
        Serial.println("-Click");
        motor.loopFOC();
        delay(1);
    }
    motor.move(0);
    motor.loopFOC();
}

void CalibrationKlick()
{
    Serial.println("Don't touch and klick 'c' ");
    while (Serial.available() <= 0)
    {
    }
    if (Serial.read() == 'c')
    {
        idle_klick = klick.read();
    }
    Serial.println("press with medium force and klick 'c' ");
    while (Serial.available() <= 0)
    {
    }
    if (Serial.read() == 'c')
    {
        delta_klick = klick.read() - idle_klick;
    }
    Serial.print("idle_klick: ");
    Serial.print(idle_klick);
    Serial.print("   delta_klick: ");
    Serial.println(CalibrationClick);
    //  }
    // Save the variable to EEPROM
    EEPROM.begin(512);
    EEPROM.writeInt(eepromAddress, delta_klick);
    eepromAddress += sizeof(delta_klick);
    EEPROM.writeInt(eepromAddress, idle_klick);
    EEPROM.commit();
    EEPROM.end();
    Serial.println("Saved Values");
}

void CalibrateSensorZero()
{
    old_val = encoder.getSensorAngle();
    new_val = encoder.getSensorAngle();
    // cal_val = (3*PI)/2;
    //  cal_val = (25 * PI) / 18; // Snap Point links 250Â°
    //  cal_val = (29*PI)/18;             // Snap Point rechts 290Â°
}

float LoopSensorValue(float meas_val)
{
    old_val = new_val;
    new_val = meas_val;
    dif_val = new_val - old_val;
    cal_val = cal_val + dif_val;
    if (cal_val < 0)
    {
        cal_val = 6.28;
    }
    else if (cal_val > 6.28)
    {
        cal_val = 0.00;
    }
    return cal_val;
}

void DrawPointer(float angle)
{
    // float angle = encoder.getSensorAngle();
    x_circle = (TFT_WIDTH / 2) + 117 * cos(angle);
    y_circle = (TFT_HEIGHT / 2) + 117 * sin(angle);
    spr_.fillCircle(TFT_WIDTH / 2, TFT_HEIGHT / 2, 250 / 2, TFT_BLACK);
    spr_.fillCircle(120, 20, 2, TFT_BLUE);
    spr_.fillCircle(85.8, 26.03, 2, TFT_BLUE);
    spr_.fillCircle(154.2, 26.03, 2, TFT_BLUE);
    spr_.drawLine(TFT_WIDTH / 2, TFT_HEIGHT / 2, x_circle, y_circle, TFT_RED);
    spr_.pushSprite(0, 0);
    ledcWrite(LEDC_CHANNEL_LCD_BACKLIGHT, UINT16_MAX);
    /*
        Serial.print(x_circle);
        Serial.print("   ");
        Serial.print(y_circle);
        Serial.print("   ");
        Serial.println(angle);
        */
}

void MotorCalibrate()
{
    // SimpleFOC is supposed to be able to determine this automatically (if you omit params to initFOC), but
    // it seems to have a bug (or I've misconfigured it) that gets both the offset and direction very wrong!
    // So this value is based on experimentation.
    // TODO: dig into SimpleFOC calibration and find/fix the issue

    Serial.println("\n\n\nStarting calibration, please DO NOT TOUCH MOTOR until complete!");
    delay(1000);

    motor.controller = MotionControlType::angle_openloop;
    motor.pole_pairs = 1;
    motor.initFOC(0, Direction::CW);

    float a = 0;

    motor.voltage_limit = FOC_VOLTAGE_LIMIT;
    motor.move(a);

    // #### Determine direction motor rotates relative to angle sensor
    for (uint8_t i = 0; i < 200; i++)
    {
        encoder.update();
        motor.move(a);
        delay(1);
    }
    float start_sensor = encoder.getAngle();

    for (; a < 3 * _2PI; a += 0.01)
    {
        encoder.update();
        motor.move(a);
        delay(1);
    }

    for (uint8_t i = 0; i < 200; i++)
    {
        encoder.update();
        delay(1);
    }
    float end_sensor = encoder.getAngle();

    motor.voltage_limit = 0;
    motor.move(a);

    Serial.println("");

    float movement_angle = fabsf(end_sensor - start_sensor);
    if (movement_angle < radians(30) || movement_angle > radians(180))
    {
        snprintf(buf_, sizeof(buf_), "ERROR! Unexpected sensor change: start=%.2f end=%.2f", start_sensor, end_sensor);
        Serial.println(buf_);
        return;
    }

    Serial.println("Sensor measures positive for positive motor rotation:");
    if (end_sensor > start_sensor)
    {
        Serial.println("YES, Direction=CW");
        motor.initFOC(0, Direction::CW);
    }
    else
    {
        Serial.println("NO, Direction=CCW");
        motor.initFOC(0, Direction::CCW);
    }
    snprintf(buf_, sizeof(buf_), "  (start was %.1f, end was %.1f)", start_sensor, end_sensor);
    Serial.println(buf_);

    // #### Determine pole-pairs
    // Rotate 20 electrical revolutions and measure mechanical angle traveled, to calculate pole-pairs
    uint8_t electrical_revolutions = 20;
    snprintf(buf_, sizeof(buf_), "Going to measure %d electrical revolutions...", electrical_revolutions);
    Serial.println(buf_);
    motor.voltage_limit = FOC_VOLTAGE_LIMIT;
    motor.move(a);
    Serial.println("Going to electrical zero...");
    float destination = a + _2PI;
    for (; a < destination; a += 0.03)
    {
        encoder.update();
        motor.move(a);
        delay(1);
    }
    Serial.println("pause..."); // Let momentum settle...
    for (uint16_t i = 0; i < 1000; i++)
    {
        encoder.update();
        delay(1);
    }
    Serial.println("Measuring...");

    start_sensor = motor.sensor_direction * encoder.getAngle();
    destination = a + electrical_revolutions * _2PI;
    for (; a < destination; a += 0.03)
    {
        encoder.update();
        motor.move(a);
        delay(1);
    }
    for (uint16_t i = 0; i < 1000; i++)
    {
        encoder.update();
        motor.move(a);
        delay(1);
    }
    end_sensor = motor.sensor_direction * encoder.getAngle();
    motor.voltage_limit = 0;
    motor.move(a);

    if (fabsf(motor.shaft_angle - motor.target) > 1 * PI / 180)
    {
        Serial.println("ERROR: motor did not reach target!");
        while (1)
        {
        }
    }

    float electrical_per_mechanical = electrical_revolutions * _2PI / (end_sensor - start_sensor);
    snprintf(buf_, sizeof(buf_), "Electrical angle / mechanical angle (i.e. pole pairs) = %.2f", electrical_per_mechanical);
    Serial.println(buf_);

    if (electrical_per_mechanical < 3 || electrical_per_mechanical > 12)
    {
        snprintf(buf_, sizeof(buf_), "ERROR! Unexpected calculated pole pairs: %.2f", electrical_per_mechanical);
        Serial.println(buf_);
        return;
    }

    int measured_pole_pairs = (int)round(electrical_per_mechanical);
    snprintf(buf_, sizeof(buf_), "Pole pairs set to %d", measured_pole_pairs);
    Serial.println(buf_);

    delay(1000);

    // #### Determine mechanical offset to electrical zero
    // Measure mechanical angle at every electrical zero for several revolutions
    motor.voltage_limit = FOC_VOLTAGE_LIMIT;
    motor.move(a);
    float offset_x = 0;
    float offset_y = 0;
    float destination1 = (floor(a / _2PI) + measured_pole_pairs / 2.) * _2PI;
    float destination2 = (floor(a / _2PI)) * _2PI;
    for (; a < destination1; a += 0.4)
    {
        motor.move(a);
        delay(100);
        for (uint8_t i = 0; i < 100; i++)
        {
            encoder.update();
            delay(1);
        }
        float real_electrical_angle = _normalizeAngle(a);
        float measured_electrical_angle = _normalizeAngle((float)(motor.sensor_direction * measured_pole_pairs) * encoder.getMechanicalAngle() - 0);

        float offset_angle = measured_electrical_angle - real_electrical_angle;
        offset_x += cosf(offset_angle);
        offset_y += sinf(offset_angle);

        snprintf(buf_, sizeof(buf_), "%.2f, %.2f, %.2f", degrees(real_electrical_angle), degrees(measured_electrical_angle), degrees(_normalizeAngle(offset_angle)));
        Serial.println(buf_);
    }
    for (; a > destination2; a -= 0.4)
    {
        motor.move(a);
        delay(100);
        for (uint8_t i = 0; i < 100; i++)
        {
            encoder.update();
            delay(1);
        }
        float real_electrical_angle = _normalizeAngle(a);
        float measured_electrical_angle = _normalizeAngle((float)(motor.sensor_direction * measured_pole_pairs) * encoder.getMechanicalAngle() - 0);

        float offset_angle = measured_electrical_angle - real_electrical_angle;
        offset_x += cosf(offset_angle);
        offset_y += sinf(offset_angle);

        snprintf(buf_, sizeof(buf_), "%.2f, %.2f, %.2f", degrees(real_electrical_angle), degrees(measured_electrical_angle), degrees(_normalizeAngle(offset_angle)));
        Serial.println(buf_);
    }
    motor.voltage_limit = 0;
    motor.move(a);

    float avg_offset_angle = atan2f(offset_y, offset_x);

    // #### Apply settings
    motor.pole_pairs = measured_pole_pairs;
    motor.zero_electric_angle = avg_offset_angle + _3PI_2;
    motor.voltage_limit = FOC_VOLTAGE_LIMIT;
    motor.controller = MotionControlType::torque;

    Serial.println("");
    Serial.println("RESULTS:");
    snprintf(buf_, sizeof(buf_), "  ZERO_ELECTRICAL_OFFSET: %.2f", motor.zero_electric_angle);
    Serial.println(buf_);
    if (motor.sensor_direction == Direction::CW)
    {
        Serial.println("  FOC_DIRECTION: Direction::CW");
    }
    else
    {
        Serial.println("  FOC_DIRECTION: Direction::CCW");
    }
    snprintf(buf_, sizeof(buf_), "  MOTOR_POLE_PAIRS: %d", motor.pole_pairs);
    Serial.println(buf_);

    Serial.println("");
    Serial.println("Saving to persistent configuration...");
    /*    PB_MotorCalibration calibration = {
            .calibrated = true,
            .zero_electrical_offset = motor.zero_electric_angle,
            .direction_cw = motor.sensor_direction == Direction::CW,
            .pole_pairs = motor.pole_pairs,
        };
        if (configuration_.setMotorCalibrationAndSave(calibration)) {
            log("Success!");
        }
    */
}

void test()
{
    // If we are not moving and we're close to the center (but not exactly there), slowly adjust the centerpoint to match the current position
    idle_check_velocity_ewma = motor.shaft_velocity * IDLE_VELOCITY_EWMA_ALPHA + idle_check_velocity_ewma * (1 - IDLE_VELOCITY_EWMA_ALPHA);
    if (fabsf(idle_check_velocity_ewma) > IDLE_VELOCITY_RAD_PER_SEC)
    {
        last_idle_start = 0;
    }
    else
    {
        if (last_idle_start == 0)
        {
            last_idle_start = millis();
        }
    }
    if (last_idle_start > 0 && millis() - last_idle_start > IDLE_CORRECTION_DELAY_MILLIS && fabsf(motor.shaft_angle - current_detent_center) < IDLE_CORRECTION_MAX_ANGLE_RAD)
    {
        current_detent_center = motor.shaft_angle * IDLE_CORRECTION_RATE_ALPHA + current_detent_center * (1 - IDLE_CORRECTION_RATE_ALPHA);
    }

    // Check where we are relative to the current nearest detent; update our position if we've moved far enough to snap to another detent
    float angle_to_detent_center = motor.shaft_angle - current_detent_center;
#if SK_INVERT_ROTATION
    angle_to_detent_center = -motor.shaft_angle - current_detent_center;
#endif

    float snap_point_radians = config.position_width_radians * config.snap_point;
    float bias_radians = config.position_width_radians * config.snap_point_bias;
    float snap_point_radians_decrease = snap_point_radians + (current_position <= 0 ? bias_radians : -bias_radians);
    float snap_point_radians_increase = -snap_point_radians + (current_position >= 0 ? -bias_radians : bias_radians);

    int32_t num_positions = config.max_position - config.min_position + 1;
    if (angle_to_detent_center > snap_point_radians_decrease && (num_positions <= 0 || current_position > config.min_position))
    {
        current_detent_center += config.position_width_radians;
        angle_to_detent_center -= config.position_width_radians;
        current_position--;
    }
    else if (angle_to_detent_center < snap_point_radians_increase && (num_positions <= 0 || current_position < config.max_position))
    {
        current_detent_center -= config.position_width_radians;
        angle_to_detent_center += config.position_width_radians;
        current_position++;
    }

    latest_sub_position_unit = -angle_to_detent_center / config.position_width_radians;

    float dead_zone_adjustment = CLAMP(
        angle_to_detent_center,
        fmaxf(-config.position_width_radians * DEAD_ZONE_DETENT_PERCENT, -DEAD_ZONE_RAD),
        fminf(config.position_width_radians * DEAD_ZONE_DETENT_PERCENT, DEAD_ZONE_RAD));

    bool out_of_bounds = num_positions > 0 && ((angle_to_detent_center > 0 && current_position == config.min_position) || (angle_to_detent_center < 0 && current_position == config.max_position));
    motor.PID_velocity.limit = 10; // out_of_bounds ? 10 : 3;
    motor.PID_velocity.P = out_of_bounds ? config.endstop_strength_unit * 4 : config.detent_strength_unit * 4;

    // Apply motor torque based on our angle to the nearest detent (detent strength, etc is handled by the PID_velocity parameters)
    if (fabsf(motor.shaft_velocity) > 60)
    {
        // Don't apply torque if velocity is too high (helps avoid positive feedback loop/runaway)
        motor.move(0);
    }
    else
    {
        float input = -angle_to_detent_center + dead_zone_adjustment;
        if (!out_of_bounds && config.detent_positions_count > 0)
        {
            bool in_detent = false;
            for (uint8_t i = 0; i < config.detent_positions_count; i++)
            {
                if (config.detent_positions[i] == current_position)
                {
                    in_detent = true;
                    break;
                }
            }
            if (!in_detent)
            {
                input = 0;
            }
        }
        float torque = motor.PID_velocity(input);
#if SK_INVERT_ROTATION
        torque = -torque;
#endif
        motor.move(torque);
        snprintf(buf_, sizeof(buf_), "Motorshaft: %.2f, Encoderangle: %.2f", motor.shaft_angle, encoder.getSensorAngle());
        Serial.println(buf_);
    }
}